2. Proceso de arranque SystemV

a) Enumere los pasos del proceso de inicio de un sistema GNU/Linux, desde que se prende 
la PC hasta que se logra obtener el login en el sistema.
1- Comienza a ejecutarse el código de BIOS.
2- El BIOS ejecuta el POST (Power-On Self Test) el cuál se encarga de chequear que el
hardware escencial se encuentre en correcto funcionamiento.
3- El BIOS lee el gestor de arranque en el MBR.
4- El BIOS carga el gestor de arranque en el MBC
5- El bootloader carga el kernel y el initrd
6- Se cagra el initrd en la ram el cual permite al sistema operativo acceder a controladores
para comunicarse con dispositivos de hardware escenciales.
7- El sistema operativo carga el proceso init y descarta initrd
8- Se lee el /etc/inittab
9- Se ejecutan los scripts apuntados por el runlevel 1
10- El final del runlevel 1 le indica que vaya al runlevel por defecto
11- Se ejecutan los scripts apuntados por el runlevel por defecto
12- El sistema está listo para usarse


b) Proceso INIT. ¿Quién lo ejecuta? ¿Cuál es su objetivo?
El proceso init es ejecutado por el OS, es el padre de todos los procesos. Su PDI es 1 y es el 
encargado de montar el sistema de archivos, de hacer disponibles los demás dispositivos y
de cargar todos los procesos necesarios para garantizar el correcto funcionamiento del OS.

c) RunLevels. ¿Qué son? ¿Cuál es su objetivo?
El objetivo de los runlevels es el de apagar ciertos procesos y/o iniciar otros según el
runlevel que sean. Por ejemplo, el runlevel 0 (rc0.d) es un directorio con archivos
links simbolicos a esos procesos que en su nombre está denotado con una S si inician un
proceso y con una K si lo terminan.

d) ¿A qué hace referencia cada nivel de ejecución según el estándar? ¿Dónde se define qué
Runlevel ejecutar al iniciar el sistema operativo? ¿Todas las distribuciones respetan
estos estándares?
Según el estándar:
• 0: halt (parada)
• 1: single user mode (monousuario)
• 2: multiuser, without NFS (modo multiusuario sin soperte de
red)
• 3: full multiuser mode console (modo multiusuario completo
por consola)
• 4: no se utiliza
• 5: X11 (modo multiusuario completo con login gráfico basado
en X)
• 6: reboot
No, no todas las distribuciones respetan estos estándares, en el último timepo la mayoría de las 
distros han pasado a utilizar systemd como sistema de inicialización.

e) Archivo /etc/inittab. ¿Cuál es su finalidad? ¿Qué tipo de información se almacena en
el? ¿Cuál es la estructura de la información que en él se almacena?
En el archivo de texto inittab se encuentra definido qué runlevel se inicia como predeterminado.
Se encuentra también definido qué runlevels ejecutan qué procesos, la configuración de cada 
runlevel se encuentra de la siguiente forma: 
id:nivelesEjecución:acción:proceso
Un ejemplo de un proceso al cuál más de un runlevel ejecuta sería:
cr:2345:respawn:/usr/sbin/cron
- 2345: Esto significa que el proceso cron se ejecutará cuando el sistema esté en los runlevels 2,3,4 o 5.
- respawn: Indica que si el proceso se detiene, el sistema debe reiniciarlo automáticamente en esos niveles.
- /usr/sbin/cron: Es el proceso que se ejecutará en los runlevels indicados.

f) Suponga que se encuentra en el runlevel <X>. Indique qué comando(s) ejecutaría para
cambiar al runlevel <Y>. ¿Este cambio es permanente? ¿Por qué?
Se puede utilizar los comandos init o telinit de la siguiente forma
sudo init X
sudo telinit X
Siendo X el runlevel al cual se desea cambiar. A menudo se recomienda utilizar telinit para realizar
cambios de runlevel antes que init ya que maneja los procesos en ejecución de manera más segura que init
al momento de querer realizar un cambio de runlevel.

g) Scripts RC. ¿Cuál es su finalidad? ¿Dónde se almacenan? Cuando un sistema GNU/Li-
nux arranca o se detiene se ejecutan scripts, indique cómo determina qué script ejecutar
ante cada acción. ¿Existe un orden para llamarlos? Justifique.
Los scripts que ejecuta cada runlevel se encuentran todos en el directorio /etc/init.d. Por otro lado
los directorios rc0.d/ rc1.d/ rc2.d/ rc3.d/ rc4.d/ rc5.d/ rc6.d/ rcS.d/ contienen archivos del
tipo enlaces simbólicos los cuales apuntan a los scripts de init.d que controlan los servicios. Un
ejemplo de estos directorios podría ser el rc0.d/ el cual se encarga de apagar el computador, es por
eso que todos sus enlaces simbólicos inician con una K:

rc0.d/:
K01alsa-utils  K01openvpn            K01spice-vdagent        K01virtualbox
K01bluetooth   K01plymouth           K01sssd
K01gdm3        K01saned              K01unattended-upgrades
K01kerneloops  K01speech-dispatcher  K01uuidd

TERMINAR, FALTA SABER QUE ONDA EL ORDEN DE EJECUCIÓN


